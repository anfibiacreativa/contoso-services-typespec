import "@typespec/rest";
import "@typespec/openapi3";

using TypeSpec.Http;

@service({
  title: "Contoso Real Estate Listings Service",
  version: "2023-09-06",
})
@server("/api", "Contoso Azure Hosted Production Endpoint")
@server("http://localhost:7071/api", "Localhost Development Endpoint")
@doc("This is the Contoso Real Estate portal listings service")
namespace ContosoRealEstate;

enum ammenities {
  `swimming pool`,
  gym,
  `wi-fi`,
  parking,
  balcony,
  terrace,
  garden,
  patio,
  sauna,
  jacuzzi,
  fireplace,
  `air conditioning`,
  heating,
  elevator,
  `laundry room`,
  dishwasher,
  microwave,
  furniture,
  `no furniture`,
}

model Address {
  type: {};
  description: "A valid address for listing";
  id: string;
  slug: string;
  buildingNumber: string;
  street: string;
  city: string;
  zipCode: string;
  country: string;
  createdAt: {
    type: string;
    format: "date-time";
  };
  state?: string;
}

model Review {
  type: {};
  description: "A valid review for listing";
  id?: string;
  slug?: string;
  userId: string;
  listingId: string;
  rating: int32;
  comment: string;
}

model Listing {
  @visibility("read")
  id?: {
    type: string;
    format: "uuid";
    description: "Autogenerated unique identifier for the listing";
    example: "1db1f3a89eb2dde64e827aea";
  };

  title: string;
  slug: string;
  createdAt?: {
    type: string;
    format: "date-time";
  };
  bathrooms: int32;
  bedrooms: int32;
  description: string;
  type?: string;
  isFeatured?: boolean;
  isRecommended?: boolean;
  photos: string[];
  capacity?: int32;
  ammenities?: {
    type: Array<string>;
    description: "Identifies ammenities in a listing";
    items: {
      type: ContosoRealEstate.ammenities;
      default: [];
      example: ["fireplace", "garden"];
    };
  };
  reviews?: {
    type: Array<string>;
    description: "listing reviews";
    items: {
      $ref: "#/components/schemas/Review";
      example: [
        {
          id: "1db1f3a89eb2dde64e827aea";
          rating: 4;
          comment: "Great place to stay!";
        }
      ];
    };
  };
  address: {
    type: {};
    description: "A valid address for listing";
    $ref: "#/components/schemas/Address";
    example: {
      city: "Edinburgh";
      country: "Scotland";
      street: "Sojourner Drive";
      buildingNumber: "Apt 3B";
      zipCode: "10001";
    };
  };
  fees?: {};
}

@error
model Error {
  code: int32;
  message: string;
}

@route("listings")
@tag("listing")
interface Listings {
  @get list(): Listing[] | Error;
  @get read(@path id: string): Listing | Error;
}
